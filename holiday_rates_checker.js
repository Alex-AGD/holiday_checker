const axios = require("axios");

async function checkHolidays() {
  const apiKey = process.env.HOLIDAY_API_KEY;
  const currentDate = new Date();
  const year = 2023; // –ò—Å–ø–æ–ª—å–∑—É–µ–º 2023 –≥–æ–¥ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ API
  const month = currentDate.getMonth() + 1;
  const day = currentDate.getDate();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    const holidayResponse = await axios.get(
      `https://holidayapi.com/v1/holidays?country=BY&year=${year}&month=${month}&day=${day}&key=${apiKey}`
    );

    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    const ratesResponse = await axios.get(
      "https://api.nbrb.by/exrates/rates?periodicity=0"
    );

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = "üóì –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç:\n\n";

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö
    const holidays = holidayResponse.data.holidays || [];
    if (holidays.length > 0) {
      message += "üéâ –í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É –±—ã–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:\n";
      holidays.forEach((holiday) => {
        message += `- ${holiday.name}\n`;
      });
    } else {
      message += "üìÖ –í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É –Ω–µ –±—ã–ª–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤\n";
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç
    message += "\nüí∞ –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n";
    const mainCurrencies = ratesResponse.data.filter((rate) =>
      ["USD", "EUR", "RUB"].includes(rate.Cur_Abbreviation)
    );
    mainCurrencies.forEach((currency) => {
      message += `${currency.Cur_Abbreviation}: ${currency.Cur_OfficialRate} BYN\n`;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Slack
    await axios.post(process.env.SLACK_WEBHOOK_URL, { text: message });
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Slack");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error.message);
    throw error;
  }
}

async function getExchangeRates() {
  try {
    const response = await axios.get(
      "https://www.nbrb.by/api/exrates/rates?periodicity=0"
    );
    return response.data;
  } catch (error) {
    console.error("Error fetching exchange rates:", error);
    return null;
  }
}

async function sendToSlack(message) {
  try {
    await axios.post(process.env.SLACK_WEBHOOK_URL, {
      text: message,
    });
  } catch (error) {
    console.error("Error sending to Slack:", error);
  }
}

async function main() {
  const today = new Date().toISOString().split("T")[0];

  const [holidays, rates] = await Promise.all([
    checkHolidays(),
    getExchangeRates(),
  ]);

  let message = `–î–∞–Ω–Ω—ã–µ –Ω–∞ ${today}\n\n`;

  if (holidays && holidays.holidays) {
    const todayHolidays = holidays.holidays.filter(
      (holiday) => holiday.date === today
    );
    if (todayHolidays.length > 0) {
      message += `–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è:\n${todayHolidays
        .map((h) => `- ${h.name}`)
        .join("\n")}\n\n`;
    } else {
      message += "–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç\n\n";
    }
  }

  if (rates) {
    const mainRates = rates
      .filter((rate) => ["USD", "EUR", "RUB"].includes(rate.Cur_Abbreviation))
      .map((rate) => `${rate.Cur_Abbreviation}: ${rate.Cur_OfficialRate}`)
      .join("\n");
    message += `–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n${mainRates}`;
  }

  await sendToSlack(message);
}

main().catch(console.error);

checkHolidays();
